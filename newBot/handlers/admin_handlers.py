import os
from typing import Dict, Tuple
from aiogram import types, Bot
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from newBot.repositories.sales_point_repository import SalesPointRepository
from newBot.repositories.poet_repository import PoetRepository
from newBot.db import SessionLocal
from newBot.services.agent_service import AgentService
from newBot.services.sales_point_service import SalesPointService
from newBot.services.poet_service import PoetService
from newBot.services.video_editor_service import VideoEditorService

pending_rejections: Dict[int, Tuple[str, int]] = {}

BASE_DIR = os.path.dirname(os.path.dirname(__file__))
AGENT_CONTRACT_PATH = os.path.join(BASE_DIR, "files", "agent_contract.docx")
SP_CONTRACT_PATH = os.path.join(BASE_DIR, "files", "sales_point_contract.docx")
POET_CONTRACT_PATH = os.path.join(BASE_DIR, "files", "poet_contract.docx")
VE_CONTRACT_PATH = os.path.join(BASE_DIR, "files", "video_editor_contract.docx")


async def handle_approve_user(
    callback: types.CallbackQuery,
    bot: Bot
):
    """
    –û–∂–∏–¥–∞–µ–º callback.data –≤–∏–¥–∞ "approve_<role>_<user_id>"
    –ù–∞–ø—Ä–∏–º–µ—Ä: "approve_agent_123456"
    """
    data = callback.data  # —Å—Ç—Ä–æ–∫–∞ "approve_agent_123456"
    parts = data.split("_")
    if len(parts) != 4:
        await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.", show_alert=True)
        return

    _, role, uid, tg_id = parts
    try:
        user_id = int(uid)
    except ValueError:
        await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π user_id.", show_alert=True)
        return

    db = None
    try:
        if role == "agent":
            svc = AgentService()
            ok = svc.approve_agent(user_id)
            contract_path = AGENT_CONTRACT_PATH
            sign_prefix = "sign_contract_agent"
        elif role == "sp":
            db = SessionLocal()
            svc = SalesPointService(db)
            ok = svc.approve_sales_point(user_id)
            contract_path = SP_CONTRACT_PATH
            sign_prefix = "sign_contract_sp"
        elif role == "poet":
            db = SessionLocal()
            svc = PoetService(db)
            ok = svc.approve_poet(user_id)
            contract_path = POET_CONTRACT_PATH
            sign_prefix = "sign_contract_poet"
        elif role == "ve":
            db = SessionLocal()
            svc = VideoEditorService(db)
            ok = svc.approve_video_editor(user_id)
            contract_path = VE_CONTRACT_PATH
            sign_prefix = "sign_contract_ve"
        else:
            await callback.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–æ–ª—å.", show_alert=True)
            return

        if ok:
            # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å –∑–∞—è–≤–∫–æ–π
            await callback.message.edit_reply_markup(reply_markup=None)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–≥–æ–≤–æ—Ä –∏ –∫–Ω–æ–ø–∫—É "–ü–æ–¥–ø–∏—Å–∞—Ç—å –¥–æ–≥–æ–≤–æ—Ä"
            if os.path.exists(contract_path):
                kb = InlineKeyboardMarkup(inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="–ü–æ–¥–ø–∏—Å–∞—Ç—å –¥–æ–≥–æ–≤–æ—Ä",
                            callback_data=f"{role}_sign_contract_{user_id}_{tg_id}"
                        )
                    ]
                ])
                await bot.send_document(
                    chat_id=tg_id,
                    document=types.FSInputFile(contract_path),
                    caption="üéâ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞!\n\n"
                            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –¥–æ–≥–æ–≤–æ—Ä–æ–º –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ü–æ–¥–ø–∏—Å–∞—Ç—å –¥–æ–≥–æ–≤–æ—Ä¬ª –Ω–∏–∂–µ.",
                    reply_markup=kb
                )
            else:
                # –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç ‚Äî –ø—Ä–æ—Å—Ç–æ —É–≤–µ–¥–æ–º–ª—è–µ–º
                await bot.send_message(
                    chat_id=user_id,
                    text="üéâ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞! –ù–æ —Ñ–∞–π–ª –¥–æ–≥–æ–≤–æ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω."
                )

            await callback.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} ({role}) –æ–¥–æ–±—Ä–µ–Ω.")
        else:
            await callback.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–¥–æ–±—Ä–∏—Ç—å {role} {user_id}.", show_alert=True)
    finally:
        if db:
            db.close()

async def handle_reject_user_callback(
    callback: types.CallbackQuery
):
    """
    –°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞ callback.data –≤–∏–¥–∞ "reject_<role>_<user_id>"
    –ü—Ä–∏–º–µ—Ä: "reject_agent_123456"
    """
    parts = callback.data.split("_")
    if len(parts) != 4:
        await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.", show_alert=True)
        return

    _, role, uid, tg_id = parts
    try:
        user_id = int(uid)
    except ValueError:
        await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π user_id.", show_alert=True)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–∞–∫–∞—è –∑–∞—è–≤–∫–∞ —Ä–µ–∞–ª—å–Ω–æ –µ—Å—Ç—å (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    db = None
    try:
        if role == "agent":
            exists = AgentService().get_agent_profile(user_id)
        elif role == "sp":
            db = SessionLocal()
            exists = SalesPointService(db).get_sales_point_profile(user_id)
        elif role == "poet":
            db = SessionLocal()
            exists = PoetService(db).get_poet_profile(user_id)
        elif role == "ve":
            db = SessionLocal()
            exists = VideoEditorService(db).get_video_editor_profile(user_id)
        else:
            exists = None

        if not exists:
            await callback.answer(f"–ó–∞—è–≤–∫–∞ {role} {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
            return
    finally:
        if db:
            db.close()

    # –£–¥–∞–ª—è–µ–º inline-–∫–Ω–æ–ø–∫–∏ ¬´–û–¥–æ–±—Ä–∏—Ç—å/–û—Ç–∫–ª–æ–Ω–∏—Ç—å¬ª –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    await callback.message.edit_reply_markup(reply_markup=None)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ FSM: –∫–æ–º—É –æ—Ç–∫–∞–∑, –∏ —Ä–æ–ª—å
    admin_id = callback.from_user.id
    pending_rejections[admin_id] = (role, user_id, tg_id)

    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º —É –∞–¥–º–∏–Ω–∞ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–∞–∑–∞
    await callback.message.answer(f"üìù –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–∞–∑–∞ –¥–ª—è {role} {user_id} (—Ç–µ–∫—Å—Ç–æ–º), –í–∞–º –Ω—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:")
    await callback.answer()

async def process_reject_reason(
    message: types.Message,
    bot: Bot
):
    """
    –°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç, –∫–æ–≥–¥–∞ –∞–¥–º–∏–Ω –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è ¬´–û—Ç–∫–ª–æ–Ω–∏—Ç—å¬ª.
    –ï—Å–ª–∏ –µ–≥–æ ID –µ—Å—Ç—å –≤ pending_rejections, —Å—á–∏—Ç–∞–µ–º –ø—Ä–∏—Å–ª–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –ø—Ä–∏—á–∏–Ω–æ–π –æ—Ç–∫–∞–∑–∞.
    """
    admin_id = message.from_user.id
    if admin_id not in pending_rejections:
        # –ï—Å–ª–∏ –∞–¥–º–∏–Ω –ø–∏—à–µ—Ç —á—Ç–æ-—Ç–æ ¬´–Ω–µ –ø–æ –¥–µ–ª—É¬ª, –ø—Ä–æ—Å—Ç–æ –≤—ã—Ö–æ–¥–∏–º
        return

    role, user_id, tg_id = pending_rejections.pop(admin_id)  # –∑–∞–±–∏—Ä–∞–µ–º –∏ —É–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å
    reason = message.text.strip()

    # –ü—Ä–æ–±—É–µ–º —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å –∏–∑ –ë–î
    db = None
    try:
        if role == "agent":
            deleted = AgentService().remove_agent(user_id)
        elif role == "sp":
            db = SessionLocal()
            repo = SalesPointRepository(db)
            deleted = repo.delete_by_user_id(user_id)
        elif role == "poet":
            db = SessionLocal()
            repo = PoetRepository(db)
            deleted = repo.delete_by_user_id(user_id)
        elif role == "ve":
            from newBot.repositories.video_editor_repository import VideoEditorRepository
            db = SessionLocal()
            repo = VideoEditorRepository(db)
            deleted = repo.delete_by_user_id(user_id)
        else:
            deleted = False
    finally:
        if db:
            db.close()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–∫–∞–∑–µ —Å —Ç–µ–∫—Å—Ç–æ–º –ø—Ä–∏—á–∏–Ω—ã
    try:
        await bot.send_message(
            chat_id=tg_id,
            text=f"‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ ({role}) –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.\n\n–ü—Ä–∏—á–∏–Ω–∞: {reason}"
        )
    except Exception as e:
        await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞, —á—Ç–æ –≤—Å—ë –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
    await message.answer(f"‚úÖ –ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–∞–∑–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} ({role}).")