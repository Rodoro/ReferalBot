import json
import os
from sqlalchemy.orm import Session
from aiogram import types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import ReplyKeyboardRemove, InlineKeyboardButton, InlineKeyboardMarkup
from newBot.config import settings
from newBot.db import SessionLocal
from newBot.lib.user_roles import get_user_roles
from newBot.services.poet_service import PoetService
from aiogram import Bot

BASE_DIR = os.path.dirname(os.path.dirname(__file__))
POET_CONTRACT_PATH = os.path.join(BASE_DIR, "files", "poet_contract.docx")

from newBot.services.user_service import UserService

class PoetRegistrationStates(StatesGroup):
    waiting_for_mini_app = State()
    confirmation = State()

def poet_start_inline_keyboard():
    kb = InlineKeyboardBuilder()
    kb.add(types.InlineKeyboardButton(text="–°—Ç–∞—Ä—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ—ç—Ç–∞", callback_data="start_poet_registration"))
    return kb.as_markup()

def poet_confirmation_keyboard():
    kb = InlineKeyboardBuilder()
    kb.add(types.InlineKeyboardButton(text="–ò—Å–ø—Ä–∞–≤–∏—Ç—å", callback_data="poet_correct_data"))
    kb.add(types.InlineKeyboardButton(text="–í—Å–µ –≤–µ—Ä–Ω–æ", callback_data="poet_confirm_data"))
    return kb.as_markup()

async def cmd_start_poet_secret(message: types.Message, state: FSMContext):
    db = SessionLocal()
    try:
        user_svc = UserService(db)
        user = user_svc.get_or_create_user(
            telegram_id=message.from_user.id,
            full_name=message.from_user.full_name or "",
            username=message.from_user.username or "",
        )
        user_id = user.get("id")
    finally:
        db.close()

    
    roles = get_user_roles(db, user_id)

    if any(item[0] == 'poet' for item in roles):
        await message.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –ø–æ—ç—Ç.")
        return

    await message.answer(
        "‚úçÔ∏è –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ü–æ—ç—Ç–∞.\n\n–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–°—Ç–∞—Ä—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ—ç—Ç–∞¬ª",
        reply_markup=poet_start_inline_keyboard(),
    )

async def start_poet_registration(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    db = SessionLocal()
    try:
        from newBot.lib.user_roles import get_user_role, ROLE_NAMES, UserRole, send_profile
        role, profile = get_user_role(db, user_id)
        if role:
            if role == UserRole.POET:
                await send_profile(callback.message.bot, callback.message.chat.id, role, profile, callback.from_user, db)
            else:
                await callback.answer(
                    f"–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ {ROLE_NAMES[role]}!", show_alert=True
                )
            return
    finally:
        db.close()

    mini_app_url = f"{settings.WEBAPP_URL}/poet-form"
    web_app = types.WebAppInfo(url=mini_app_url)
    kb = types.ReplyKeyboardMarkup(
        keyboard=[[types.KeyboardButton(text="–ó–∞–ø–æ–ª–Ω–∏—Ç—å —Ñ–æ—Ä–º—É –ø–æ—ç—Ç–∞", web_app=web_app)]],
        resize_keyboard=True,
        one_time_keyboard=True,
    )
    await callback.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ—ç—Ç–∞:", reply_markup=kb)
    await state.set_state(PoetRegistrationStates.waiting_for_mini_app)
    await callback.answer()

async def handle_poet_webapp_data(message: types.Message, state: FSMContext):
    try:
        payload = message.web_app_data.data
        data = json.loads(payload)
    except Exception:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç —Ñ–æ—Ä–º—ã.")
        return

    required = [
        "full_name", "city", "inn", "phone",
        "business_type", "bik", "account", "bank_details",
    ]
    if not all(field in data and str(data[field]).strip() for field in required):
        await message.answer("–ù–µ –≤—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É –ø–æ–ª–Ω–æ—Å—Ç—å—é.")
        return

    bank_details_str = data["bank_details"]
    bank_name = None
    bank_ks = None
    for line in bank_details_str.split("\n"):
        line = line.strip()
        if line.lower().startswith("–±–∞–Ω–∫:"):
            bank_name = line.split(":", 1)[1].strip()
        elif line.lower().startswith("–∫–æ—Ä—Ä.") or line.lower().startswith("–∫–æ—Ä—Ä.—Å—á–µ—Ç:"):
            bank_ks = line.split(":", 1)[1].strip()
    if not bank_name or not bank_ks:
        await message.answer(
            "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∏–∑ `bank_details` –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞ –∏–ª–∏ –∫–æ—Ä—Ä. —Å—á–µ—Ç.\n"
            "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–æ—Ä–º–∞—Ç:\n"
            "–ë–∞–Ω–∫: <–∏–º—è –±–∞–Ω–∫–∞>\n"
            "‚Ä¶\n"
            "–ö–æ—Ä—Ä. —Å—á–µ—Ç: <–Ω–æ–º–µ—Ä –∫–æ—Ä—Ä. —Å—á–µ—Ç–∞>\n"
        )
        return

    await state.update_data({
        "full_name": data["full_name"],
        "city": data["city"],
        "inn": data["inn"],
        "phone": data["phone"],
        "business_type": data["business_type"],
        "bik": data["bik"],
        "account": data["account"],
        "bank_name": bank_name,
        "bank_ks": bank_ks,
        "bank_details": bank_details_str,
    })

    confirmation_text = (
        "<b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–ü–æ—ç—Ç):</b>\n\n"
        f"–§–ò–û: {data['full_name']}\n"
        f"–ì–æ—Ä–æ–¥: {data['city']}\n"
        f"–ò–ù–ù: {data['inn']}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n"
        f"–¢–∏–ø: {data['business_type']}\n\n"
        f"<b>–ë–ò–ö:</b> {data['bik']}\n"
        f"<b>–†–∞—Å—á–µ—Ç–Ω—ã–π —Å—á–µ—Ç:</b> {data['account']}\n"
        f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞:</b> {bank_name}\n"
        f"<b>–ö–æ—Ä—Ä. —Å—á–µ—Ç:</b> {bank_ks}"
    )

    await message.answer("–î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã:", reply_markup=ReplyKeyboardRemove(), parse_mode="HTML")
    await message.answer(confirmation_text, reply_markup=poet_confirmation_keyboard(), parse_mode="HTML")
    await state.set_state(PoetRegistrationStates.confirmation)

async def poet_confirm_data(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    telegram_id = callback.from_user.id
    data = await state.get_data()

    db = SessionLocal()
    try:
        user_svc = UserService(db)
        user = user_svc.get_or_create_user(
            telegram_id=telegram_id,
            full_name=callback.from_user.full_name or "",
            username=callback.from_user.username or ""
        )
        user_id = user.get("id")
    finally:
        db.close()

    svc = PoetService()
    try:
        svc.register_poet(
            user_id=user_id,
            telegram_id=telegram_id,
            full_name=data["full_name"],
            city=data["city"],
            inn=data["inn"],
            phone=data["phone"],
            business_type=data["business_type"],
            bik=data["bik"],
            account=data["account"],
            bank_name=data["bank_name"],
            bank_ks=data["bank_ks"],
            bank_details=data["bank_details"],
        )
        svc.approve_poet(user_id)
    except Exception as e:
        await callback.message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}", show_alert=True)
        await state.clear()
        return

    if os.path.exists(POET_CONTRACT_PATH):
        kb = InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(
                text="–ü–æ–¥–ø–∏—Å–∞—Ç—å –¥–æ–≥–æ–≤–æ—Ä",
                callback_data=f"poet_sign_contract_{user_id}_{telegram_id}"
            )
        ]])
        await bot.send_document(
            chat_id=telegram_id,
            document=types.FSInputFile(POET_CONTRACT_PATH),
            caption="üéâ –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –¥–æ–≥–æ–≤–æ—Ä–æ–º –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ü–æ–¥–ø–∏—Å–∞—Ç—å –¥–æ–≥–æ–≤–æ—Ä¬ª –Ω–∏–∂–µ.  (–ü–æ–¥–ø–∏—Å–∞–Ω–∏—è –¥–æ–≥–æ–≤–æ—Ä–∞ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–º–Ω–æ–≥–æ –±–æ–ª—å—à–µ, —á–µ–º –í—ã –¥—É–º–∞–µ—Ç–µ)",
            reply_markup=kb
        )
    else:
        await bot.send_message(
            chat_id=telegram_id,
            text="üéâ –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –ù–æ —Ñ–∞–π–ª –¥–æ–≥–æ–≤–æ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω."
        )

    await bot.send_message(
        chat_id='-1002806831697',
        message_thread_id=63,
        text=(
            f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π –ø–æ—ç—Ç:\n"
            f"- Telegram ID: {user_id}\n"
            f"- –§–ò–û: {data['full_name']}\n"
            f"- –ì–æ—Ä–æ–¥: {data['city']}\n"
            f"- –ò–ù–ù: {data['inn']}\n"
            f"- –¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n"
            f"- –¢–∏–ø: {data['business_type']}\n"
            f"- –ë–ò–ö: {data['bik']}\n"
            f"- –†–∞—Å—á–µ—Ç–Ω—ã–π —Å—á–µ—Ç: {data['account']}\n"
            f"- –ù–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞: {data['bank_name']}\n"
            f"- –ö–æ—Ä—Ä. —Å—á–µ—Ç: {data['bank_ks']}\n"
        )
    )

    await callback.message.answer("‚úÖ –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –¥–æ–≥–æ–≤–æ—Ä–æ–º.")
    await state.clear()
    await callback.answer()

async def poet_correct_data(callback: types.CallbackQuery, state: FSMContext):
    mini_app_url = f"{settings.WEBAPP_URL}/poet-form"
    web_app = types.WebAppInfo(url=mini_app_url)
    kb = types.ReplyKeyboardMarkup(
        keyboard=[[types.KeyboardButton(text="–ü–æ–≤—Ç–æ—Ä–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å —Ñ–æ—Ä–º—É", web_app=web_app)]],
        resize_keyboard=True,
        one_time_keyboard=True,
    )
    await callback.message.answer("–ò—Å–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞:", reply_markup=kb)
    await state.set_state(PoetRegistrationStates.waiting_for_mini_app)
    await callback.answer()

async def handle_poet_sign_contract(callback: types.CallbackQuery, bot: Bot):
    parts = callback.data.split("_")
    if len(parts) != 5:
        await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–æ–¥–ø–∏—Å–∏ –¥–æ–≥–æ–≤–æ—Ä–∞.", show_alert=True)
        return

    _, _, _, uid, tg_id = parts
    try:
        user_id = int(uid)
    except ValueError:
        await callback.answer("–ù–µ–≤–µ—Ä—ë–Ω–Ω—ã–π user_id.", show_alert=True)
        return

    svc = PoetService()
    try:
        svc.sign_poet_contract(user_id)
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∏ –¥–æ–≥–æ–≤–æ—Ä–∞: {e}", show_alert=True)
        return

    await callback.message.edit_reply_markup(reply_markup=None)

    await bot.send_message(
        chat_id=tg_id,
        text=(
            "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏ –¥–æ–≥–æ–≤–æ—Ä –∫–∞–∫ –ø–æ—ç—Ç!\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –ø–æ—ç—Ç."
        ),
    )

    await bot.send_message(
        chat_id='-1002806831697',
        message_thread_id=63,
        text=f"‚û°Ô∏è –ü–æ—ç—Ç {tg_id} –ø–æ–¥–ø–∏—Å–∞–ª –¥–æ–≥–æ–≤–æ—Ä.",
    )

    await callback.answer("–î–æ–≥–æ–≤–æ—Ä –ø–æ–¥–ø–∏—Å–∞–Ω.")