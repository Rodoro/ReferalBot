import json
import os
from aiogram import Bot, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (
    ReplyKeyboardRemove,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    InputMediaDocument,
)
from aiogram.utils.keyboard import InlineKeyboardBuilder

from newBot.config import settings
from newBot.lib.user_roles import get_user_roles
from newBot.services.agent_service import AgentService
from newBot.services.user_service import UserService
from newBot.db import SessionLocal

BASE_DIR = os.path.dirname(os.path.dirname(__file__))
AGENT_CONTRACT_PATH = os.path.join(BASE_DIR, "files", "consultant_contract.pdf")

class AgentRegistrationStates(StatesGroup):
    waiting_for_mini_app = State()
    confirmation = State()

def agent_start_inline_keyboard():
    kb = InlineKeyboardBuilder()
    kb.add(types.InlineKeyboardButton(text="–°—Ç–∞—Ä—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞", callback_data="start_agent_registration"))
    return kb.as_markup()

def agent_confirmation_keyboard():
    kb = InlineKeyboardBuilder()
    kb.add(types.InlineKeyboardButton(text="–ò—Å–ø—Ä–∞–≤–∏—Ç—å", callback_data="agent_correct_data"))
    kb.add(types.InlineKeyboardButton(text="–í—Å–µ –≤–µ—Ä–Ω–æ", callback_data="agent_confirm_data"))
    return kb.as_markup()


# /start secret_<ADMIN_SECRET> –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞
async def cmd_start_agent_secret(message: types.Message, state: FSMContext):
    db = SessionLocal()
    try:
        user_svc = UserService(db)
        user = user_svc.get_or_create_user(
            telegram_id=message.from_user.id,
            full_name=message.from_user.full_name or "",
            username=message.from_user.username or "",
        )
        user_id = user.get("id")
    finally:
        db.close()

    
    roles = get_user_roles(db, user_id)

    if any(item[0] == 'agent' for item in roles):
        await message.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç.")
        return
    # –ï—Å–ª–∏ –∑–¥–µ—Å—å ‚Äî –∑–Ω–∞—á–∏—Ç –Ω–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞, –Ω–∏ –ø–∞—Ä—Ç–Ω—ë—Ä –µ—â—ë –Ω–µ –±—ã–ª–∏
    await message.answer(
        "üë§ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞.\n\n–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–°—Ç–∞—Ä—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞¬ª",
        reply_markup=agent_start_inline_keyboard()
    )

# callback_data == "start_agent_registration"
async def start_agent_registration(callback: types.CallbackQuery, state: FSMContext):

    mini_app_url = f"{settings.WEBAPP_URL}/agent-form"
    web_app = types.WebAppInfo(url=mini_app_url)
    kb = types.ReplyKeyboardMarkup(
        keyboard=[[types.KeyboardButton(text="–ó–∞–ø–æ–ª–Ω–∏—Ç—å —Ñ–æ—Ä–º—É –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞", web_app=web_app)]],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await callback.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞:", reply_markup=kb)
    await state.set_state(AgentRegistrationStates.waiting_for_mini_app)
    await callback.answer()

# WebAppData ‚Üí –æ–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
async def handle_agent_webapp_data(message: types.Message, state: FSMContext):
    """
    –û–∂–∏–¥–∞–µ–º JSON –æ—Ç WebApp (–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç-—Ñ–æ—Ä–º–∞). –ü—Ä–∏–º–µ—Ä:
    {
      "full_name":"–®—É–º –î–∞–Ω—è",
      "city":"–ú–æ—Å–∫–≤–∞",
      "inn":"1231231111",
      "phone":"12888291922",
      "business_type":"–ò–ü",
      "bik":"049205805",
      "account":"30101810000000000805",
      "bank_details":"–ë–∞–Ω–∫: –ü–ê–û \"–ê–ö –ë–ê–†–°\" –ë–ê–ù–ö\n–ë–ò–ö: 049205805\n–ö–æ—Ä—Ä. —Å—á–µ—Ç: 30101810000000000805\n–†–∞—Å—á–µ—Ç–Ω—ã–π —Å—á–µ—Ç: 30101810000000000805",
      "isSales": ""
    }
    """
    try:
        payload = message.web_app_data.data  # —Å—Ç—Ä–æ–∫–∞ JSON
        data = json.loads(payload)           # –ø—Ä–µ–≤—Ä–∞—â–∞–µ–º –≤ dict
    except Exception:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç —Ñ–æ—Ä–º—ã.")
        return

    # –°–ø–∏—Å–æ–∫ –ø–æ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ —Ç–æ—á–Ω–æ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω—ã
    required = [
        "full_name", "city", "inn", "phone",
        "business_type", "bik", "account", "bank_details"
    ]
    if not all(field in data and data[field].strip() for field in required):
        await message.answer("–ù–µ –≤—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É –ø–æ–ª–Ω–æ—Å—Ç—å—é.")
        return

    # –†–∞–∑–±–∏—Ä–∞–µ–º –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω–æ–µ –ø–æ–ª–µ bank_details:
    bank_details_str = data["bank_details"]
    bank_name = None
    bank_ks = None

    for line in bank_details_str.split("\n"):
        # –£–±–∏—Ä–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        line = line.strip()
        if line.lower().startswith("–±–∞–Ω–∫:"):
            # –≤—Å—ë, —á—Ç–æ –ø–æ—Å–ª–µ "–ë–∞–Ω–∫:"
            bank_name = line.split(":", 1)[1].strip()
        elif line.lower().startswith("–∫–æ—Ä—Ä.") or line.lower().startswith("–∫–æ—Ä—Ä. —Å—á–µ—Ç:"):
            # –º–æ–∂–Ω–æ –ª–æ–≤–∏—Ç—å "–ö–æ—Ä—Ä. —Å—á–µ—Ç:" –ª–∏–±–æ "–∫–æ—Ä—Ä. —Å—á–µ—Ç:" 
            # –∑–¥–µ—Å—å –≤—Å—ë, —á—Ç–æ –ø–æ—Å–ª–µ ":"
            bank_ks = line.split(":", 1)[1].strip()

    if not bank_name or not bank_ks:
        await message.answer(
            "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∏–∑ `bank_details` –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞ –∏–ª–∏ –∫–æ—Ä—Ä. —Å—á–µ—Ç.\n"
            "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–æ—Ä–º–∞—Ç:\n"
            "–ë–∞–Ω–∫: <–∏–º—è –±–∞–Ω–∫–∞>\n"
            "‚Ä¶\n"
            "–ö–æ—Ä—Ä. —Å—á–µ—Ç: <–Ω–æ–º–µ—Ä –∫–æ—Ä—Ä. —Å—á–µ—Ç–∞>\n"
        )
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ FSM —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è (–≤–∫–ª—é—á–∞—è –æ—Ç–¥–µ–ª—å–Ω–æ bank_name –∏ bank_ks)
    await state.update_data({
        "full_name":     data["full_name"],
        "city":          data["city"],
        "inn":           data["inn"],
        "phone":         data["phone"],
        "business_type": data["business_type"],
        "bik":           data["bik"],
        "account":       data["account"],
        "bank_name":     bank_name,
        "bank_ks":       bank_ks,
        "bank_details":  bank_details_str,  # –æ—Å—Ç–∞–≤–ª—è–µ–º ¬´–∫–∞–∫ –±—ã–ª–æ¬ª
    })

    # –¢–µ–∫—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (–º–æ–∂–Ω–æ –≤—ã–≤–µ—Å—Ç–∏ –±–∞–Ω–∫ –∏ –∫–æ—Ä—Ä. —Å—á–µ—Ç –æ—Ç–¥–µ–ª—å–Ω–æ)
    confirmation_text = (
        "<b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç):</b>\n\n"
        f"–§–ò–û: {data['full_name']}\n"
        f"–ì–æ—Ä–æ–¥: {data['city']}\n"
        f"–ò–ù–ù: {data['inn']}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n"
        f"–¢–∏–ø: {data['business_type']}\n\n"
        f"<b>–ë–ò–ö:</b> {data['bik']}\n"
        f"<b>–†–∞—Å—á–µ—Ç–Ω—ã–π —Å—á–µ—Ç:</b> {data['account']}\n"
        f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞:</b> {bank_name}\n"
        f"<b>–ö–æ—Ä—Ä. —Å—á–µ—Ç:</b> {bank_ks}"
    )

    await message.answer("–î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã:", reply_markup=ReplyKeyboardRemove(), parse_mode="HTML")
    await message.answer(confirmation_text, reply_markup=agent_confirmation_keyboard(), parse_mode="HTML")
    await state.set_state(AgentRegistrationStates.confirmation)

# callback_data == "agent_confirm_data"
async def agent_confirm_data(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    telegram_id = callback.from_user.id
    data = await state.get_data()
    db = SessionLocal()
    try:
        user_svc = UserService(db)
        user = user_svc.get_or_create_user(
            telegram_id=telegram_id,
            full_name=callback.from_user.full_name or "",
            username=callback.from_user.username or ""
        )
        user_id = user.get("id")
    finally:
        db.close()
    tg_id = callback.from_user.id

    svc = AgentService()
    try:
        svc.register_agent(
            user_id=user_id,
            full_name=data["full_name"],
            city=data["city"],
            inn=data["inn"],
            phone=data["phone"],
            business_type=data["business_type"],
            bik=data["bik"],
            account=data["account"],
            bank_name=data["bank_name"],
            bank_ks=data["bank_ks"],
            bank_details=data["bank_details"],
        )
        svc.approve_agent(user_id)
    except Exception as e:
        await callback.message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}", show_alert=True)
        await state.clear()
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–≥–æ–≤–æ—Ä –∏ –∫–Ω–æ–ø–∫—É "–ü–æ–¥–ø–∏—Å–∞—Ç—å –¥–æ–≥–æ–≤–æ—Ä"
    if os.path.exists(AGENT_CONTRACT_PATH):
        kb = InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(
                text="–ü–æ–¥–ø–∏—Å–∞—Ç—å –¥–æ–≥–æ–≤–æ—Ä",
                callback_data=f"agent_sign_contract_{user_id}_{tg_id}"
            )
        ]])
        await bot.send_document(
            chat_id=tg_id,
            document=types.FSInputFile(AGENT_CONTRACT_PATH),
            caption="üéâ –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –¥–æ–≥–æ–≤–æ—Ä–æ–º –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ü–æ–¥–ø–∏—Å–∞—Ç—å –¥–æ–≥–æ–≤–æ—Ä¬ª –Ω–∏–∂–µ.  (–ü–æ–¥–ø–∏—Å–∞–Ω–∏—è –¥–æ–≥–æ–≤–æ—Ä–∞ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–º–Ω–æ–≥–æ –±–æ–ª—å—à–µ, —á–µ–º –í—ã –¥—É–º–∞–µ—Ç–µ)",
            reply_markup=kb
        )
    else:
        await bot.send_message(
            chat_id=tg_id,
            text="üéâ –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –ù–æ —Ñ–∞–π–ª –¥–æ–≥–æ–≤–æ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω."
        )

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    await bot.send_message(
        chat_id='-1002806831697',
        message_thread_id=63,
        text=(
            f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç:\n"
            f"- Telegram ID: {telegram_id}\n"
            f"- –§–ò–û: {data['full_name']}\n"
            f"- –ì–æ—Ä–æ–¥: {data['city']}\n"
            f"- –ò–ù–ù: {data['inn']}\n"
            f"- –¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n"
            f"- –¢–∏–ø: {data['business_type']}\n"
            f"- –ë–ò–ö: {data['bik']}\n"
            f"- –†–∞—Å—á–µ—Ç–Ω—ã–π —Å—á–µ—Ç: {data['account']}\n"
            f"- –ù–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞: {data['bank_name']}\n"
            f"- –ö–æ—Ä—Ä. —Å—á–µ—Ç: {data['bank_ks']}\n"
        )
    )

    await callback.message.answer("‚úÖ –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –¥–æ–≥–æ–≤–æ—Ä–æ–º.")
    await state.clear()
    await callback.answer()

# callback_data == "agent_correct_data"
async def agent_correct_data(callback: types.CallbackQuery, state: FSMContext):
    # –ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ WebApp –ø–æ–≤—Ç–æ—Ä–Ω–æ
    mini_app_url = f"{settings.WEBAPP_URL}/agent-form"
    web_app = types.WebAppInfo(url=mini_app_url)
    kb = types.ReplyKeyboardMarkup(
        keyboard=[[types.KeyboardButton(text="–ü–æ–≤—Ç–æ—Ä–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å —Ñ–æ—Ä–º—É", web_app=web_app)]],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await callback.message.answer("–ò—Å–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞:", reply_markup=kb)
    await state.set_state(AgentRegistrationStates.waiting_for_mini_app)
    await callback.answer()

async def handle_agent_sign_contract(
    callback: types.CallbackQuery,
    bot: Bot
):
    """
    –õ–æ–≤–∏–º callback.data –≤–∏–¥–∞ "agent_sign_contract_<user_id>".
    –ü–æ–º–µ—á–∞–µ–º –≤ –±–∞–∑–µ contract_signed –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É.
    """
    parts = callback.data.split("_")  # ["agent", "sign", "contract", "<user_id>"]
    if len(parts) != 5:
        await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–æ–¥–ø–∏—Å–∏ –¥–æ–≥–æ–≤–æ—Ä–∞.", show_alert=True)
        return

    _, _, _, uid, tg_id = parts
    try:
        user_id = int(uid)
    except ValueError:
        await callback.answer("–ù–µ–≤–µ—Ä—ë–Ω–Ω—ã–π user_id.", show_alert=True)
        return

    svc = AgentService()
    try:
        sp_banner_paths, sp_qr_path, sp_link, agent_qr_path, agent_link = svc.sign_agent_contract(user_id)  
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∏ –¥–æ–≥–æ–≤–æ—Ä–∞: {e}", show_alert=True)
        return

    # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É ¬´–ü–æ–¥–ø–∏—Å–∞—Ç—å –¥–æ–≥–æ–≤–æ—Ä¬ª –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    await callback.message.edit_reply_markup(reply_markup=None)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –±–∞–Ω–Ω–µ—Ä—ã –∏ QR-–∫–æ–¥
    await bot.send_message(
        chat_id=tg_id,
        text=(
            "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏ –¥–æ–≥–æ–≤–æ—Ä –∫–∞–∫ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç!\n\n"
            f"1. –í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞ (–¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤):\n{agent_link}\n\n"
            f"3. –í–∞—à–∞ —Å—Å—ã–ª–∫–∞ —Ç–æ—á–∫–∏ –ø—Ä–æ–¥–∞–∂ (–¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ –±–æ—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Å–µ–Ω):\n{sp_link}\n\n"
            "–ù–∏–∂–µ –¥–≤–∞ –±–∞–Ω–Ω–µ—Ä–∞ —Å QR-–∫–æ–¥–æ–º –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤. –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∏–ª–∏ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –∏–º–∏."
        ),
    )

    media = [
        InputMediaDocument(media=types.FSInputFile(p))
        for p in sp_banner_paths
        if p and os.path.exists(p)
    ]

    if media:
        await bot.send_media_group(chat_id=tg_id, media=media)
    if agent_qr_path and os.path.exists(agent_qr_path):
        await bot.send_document(
            chat_id=tg_id,
            document=types.FSInputFile(agent_qr_path),
            caption="–í–∞—à QR-–∫–æ–¥ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞ (–¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤)",
        )
    if sp_qr_path and os.path.exists(sp_qr_path):
        await bot.send_document(
            chat_id=tg_id,
            document=types.FSInputFile(sp_qr_path),
            caption="–í–∞—à QR-–∫–æ–¥ —Ç–æ—á–∫–∏ –ø—Ä–æ–¥–∞–∂–∏ (–¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ –±–æ—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Å–µ–Ω)",
        )
    for p in sp_banner_paths + [agent_qr_path, sp_qr_path]:
        if p and os.path.exists(p):
            os.remove(p)

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω‚Äê–∫–∞–Ω–∞–ª, —á—Ç–æ –¥–æ–≥–æ–≤–æ—Ä –ø–æ–¥–ø–∏—Å–∞–Ω
    await bot.send_message(
        chat_id='-1002806831697',
        message_thread_id=63,
        text=f"‚û°Ô∏è –ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç {tg_id} –ø–æ–¥–ø–∏—Å–∞–ª –¥–æ–≥–æ–≤–æ—Ä."
    )

    await callback.answer("–î–æ–≥–æ–≤–æ—Ä –ø–æ–¥–ø–∏—Å–∞–Ω. –°—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.")