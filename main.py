from aiogram import Bot, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram import Dispatcher
from aiogram.enums import ParseMode
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from database import Database
import asyncio

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
TOKEN = '8017768385:AAGlDmiTX5RBHPvbf-AWPhMBsAUWZ2a8VsA'
CHANNEL_ID  = -4727328007
bot = Bot(token=TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher(storage=MemoryStorage())
db = Database()

# –°–æ—Å—Ç–æ—è–Ω–∏—è
class RegistrationStates(StatesGroup):
    waiting_for_data = State()
    confirmation = State()
    signing_contract = State()

class SalesPointStates(StatesGroup):
    waiting_for_data = State()
    confirmation = State()
    signing_contract = State()

class AdminStates(StatesGroup):
    waiting_reason = State()

# Inline-–∫–Ω–æ–ø–∫–∏
def start_inline_keyboard():
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="–°—Ç–∞—Ä—Ç",
        callback_data="start_registration"))
    return builder.as_markup()

def start_ref_inline_keyboard():
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="–°—Ç–∞—Ä—Ç",
        callback_data="start_registration_ref"))
    return builder.as_markup()

def confirmation_inline_keyboard():
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="–ò—Å–ø—Ä–∞–≤–∏—Ç—å",
        callback_data="correct_data"))
    builder.add(types.InlineKeyboardButton(
        text="–í—Å–µ –≤–µ—Ä–Ω–æ",
        callback_data="confirm_data"))
    return builder.as_markup()

def admin_decision_keyboard(user_id):
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å",
        callback_data=f"approve_{user_id}"))
    builder.add(types.InlineKeyboardButton(
        text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
        callback_data=f"reject_{user_id}"))
    return builder.as_markup()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@dp.message(lambda message: message.text == "/start")
async def start_command(message: types.Message):
    welcome_text = """–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –≤—ã –ø–æ–ø–∞–ª–∏ –≤ –±–æ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ê–≥–µ–Ω—Ç–æ–≤ —Å–µ—Ä–≤–∏—Å–∞ "–ü–æ–¥–∞—Ä–∏ –ü–µ—Å–Ω—é".

–ï—Å–ª–∏ –≤—ã –ø–æ –∞–¥—Ä–µ—Å—É, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–°—Ç–∞—Ä—Ç" –Ω–∏–∂–µ."""
    await message.answer(welcome_text, reply_markup=start_inline_keyboard())

@dp.callback_query(lambda c: c.data == "start_registration")
async def start_registration(callback: types.CallbackQuery, state: FSMContext):
    if db.check_agent(callback.from_user.id):
        await callback.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!", show_alert=True)
        return
        
    instruction_text = """–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ (–∫–∞–∂–¥–æ–µ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏):
–§–ò–û
–ì–æ—Ä–æ–¥
–ò–ù–ù
–¢–µ–ª–µ—Ñ–æ–Ω
–ò–ü –∏–ª–∏ —Å–∞–º–æ–∑–∞–Ω—è—Ç—ã–π?
–ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã"""
    
    try:
        await callback.message.edit_text(instruction_text, reply_markup=None)
    except:
        await callback.message.answer(instruction_text)
    
    await state.set_state(RegistrationStates.waiting_for_data)
    await callback.answer()

@dp.message(RegistrationStates.waiting_for_data)
async def process_data(message: types.Message, state: FSMContext):
    data = [line.strip() for line in message.text.split('\n') if line.strip()]
    
    if len(data) != 6:
        msg = await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Å–µ 6 –ø—É–Ω–∫—Ç–æ–≤ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        await asyncio.sleep(3)
        try:
            await bot.delete_message(chat_id=message.chat.id, message_id=msg.message_id)
            await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
        except:
            pass
        return
    
    await state.update_data({
        'full_name': data[0],
        'city': data[1],
        'inn': data[2],
        'phone': data[3],
        'business_type': data[4],
        'bank_details': data[5]
    })
    
    confirmation_text = f"""–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:
    
–§–ò–û: {data[0]}
–ì–æ—Ä–æ–¥: {data[1]}
–ò–ù–ù: {data[2]}
–¢–µ–ª–µ—Ñ–æ–Ω: {data[3]}
–ò–ü/—Å–∞–º–æ–∑–∞–Ω—è—Ç—ã–π: {data[4]}
–ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã: {data[5]}"""

    await message.answer(confirmation_text, reply_markup=confirmation_inline_keyboard())
    await state.set_state(RegistrationStates.confirmation)

@dp.callback_query(RegistrationStates.confirmation, lambda c: c.data == "correct_data")
async def correct_data(callback: types.CallbackQuery, state: FSMContext):
    instruction_text = """–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ (–∫–∞–∂–¥–æ–µ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏):
–§–ò–û
–ì–æ—Ä–æ–¥
–ò–ù–ù
–¢–µ–ª–µ—Ñ–æ–Ω
–ò–ü –∏–ª–∏ —Å–∞–º–æ–∑–∞–Ω—è—Ç—ã–π?
–ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã"""
    
    try:
        await callback.message.edit_text(instruction_text, reply_markup=None)
    except:
        await callback.message.answer(instruction_text)
    
    await state.set_state(RegistrationStates.waiting_for_data)
    await callback.answer()

@dp.callback_query(RegistrationStates.confirmation, lambda c: c.data == "confirm_data")
async def confirm_data(callback: types.CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    db.add_agent((
        callback.from_user.id,
        user_data['full_name'],
        user_data['city'],
        user_data['inn'],
        user_data['phone'],
        user_data['business_type'],
        user_data['bank_details'],
        False,  # –§–ª–∞–≥ –æ–¥–æ–±—Ä–µ–Ω–∏—è
        ''
    ))
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    application_text = f"""üìÑ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç @{callback.from_user.username} (ID: {callback.from_user.id})
    
–§–ò–û: {user_data['full_name']}
–ì–æ—Ä–æ–¥: {user_data['city']}
–ò–ù–ù: {user_data['inn']}
–¢–µ–ª–µ—Ñ–æ–Ω: {user_data['phone']}
–ò–ü/—Å–∞–º–æ–∑–∞–Ω—è—Ç—ã–π: {user_data['business_type']}
–ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã: {user_data['bank_details']}"""
    
    await bot.send_message(
        chat_id=CHANNEL_ID,
        text=application_text,
        reply_markup=admin_decision_keyboard(callback.from_user.id)
    )
    
    try:
        await callback.message.edit_text("–û—Ç–ª–∏—á–Ω–æ, –º—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à—É –∑–∞—è–≤–∫—É, –∂–¥–∏—Ç–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è", reply_markup=None)
    except:
        await callback.message.answer("–û—Ç–ª–∏—á–Ω–æ, –º—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à—É –∑–∞—è–≤–∫—É, –∂–¥–∏—Ç–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è")
    
    await state.clear()
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@dp.callback_query(lambda c: c.data.startswith("approve_"))
async def approve_application(callback: types.CallbackQuery):
    user_id = int(callback.data.split("_")[1])

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫—Ç–æ —ç—Ç–æ ‚Äî –∞–≥–µ–Ω—Ç –∏–ª–∏ —Ç–æ—á–∫–∞
    is_agent = db.is_user_agent(user_id)
    
    if is_agent is None:
        await callback.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –∫–∞–∫ –∞–≥–µ–Ω—Ç, –Ω–∏ –∫–∞–∫ —Ç–æ—á–∫–∞.", show_alert=True)
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    if is_agent:
        db.approve_agent(user_id)
        file_path = "–ê–≥–µ–Ω—Ç—Å–∫–∏–π –¥–æ–≥–æ–≤–æ—Ä.docx"
        caption = """üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤–∞—à–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç—É—Ä–∞ –∫–∞–∫ –ê–≥–µ–Ω—Ç–∞ –æ–¥–æ–±—Ä–µ–Ω–∞.
        
–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –¥–æ–≥–æ–≤–æ—Ä–æ–º –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü–æ–¥–ø–∏—Å–∞—Ç—å –¥–æ–≥–æ–≤–æ—Ä" –Ω–∏–∂–µ."""
    else:
        db.approve_sales_point(user_id)
        file_path = "–î–æ–≥–æ–≤–æ—Ä —Å —Ç–æ—á–∫–æ–π –ø—Ä–æ–¥–∞–∂.docx"
        caption = """üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤–∞—à–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç—É—Ä–∞ –∫–∞–∫ –¢–æ—á–∫–∏ –ø—Ä–æ–¥–∞–∂ –æ–¥–æ–±—Ä–µ–Ω–∞.
        
–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –¥–æ–≥–æ–≤–æ—Ä–æ–º –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü–æ–¥–ø–∏—Å–∞—Ç—å –¥–æ–≥–æ–≤–æ—Ä" –Ω–∏–∂–µ."""
    
    try:
        with open(file_path, "rb") as file:
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥–ø–∏—Å–∞–Ω–∏—è
            sign_builder = InlineKeyboardBuilder()
            sign_builder.add(types.InlineKeyboardButton(
                text="–ü–æ–¥–ø–∏—Å–∞—Ç—å –¥–æ–≥–æ–≤–æ—Ä",
                callback_data=f"sign_contract_{'agent' if is_agent else 'sales'}_{user_id}"))
            
            await bot.send_document(
                chat_id=user_id,
                document=types.FSInputFile(file_path),
                caption=caption,
                reply_markup=sign_builder.as_markup()
            )
    except Exception as e:
        await callback.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–≥–æ–≤–æ—Ä: {e}", show_alert=True)
        return
    
    await callback.message.edit_text(f"‚úÖ –ó–∞—è–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ–¥–æ–±—Ä–µ–Ω–∞. –î–æ–≥–æ–≤–æ—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
    await callback.answer()

    await callback.answer()

@dp.callback_query(lambda c: c.data.startswith("sign_contract_"))
async def sign_contract(callback: types.CallbackQuery):
    parts = callback.data.split("_")
    role = parts[2]
    user_id = int(parts[3])
    is_agent = (role == "agent")
    
    try:
        db.sign_contract(user_id, is_agent=is_agent)
        
        if is_agent:
            referral_code = db.generate_referral_code(user_id)
            referral_link = f"https://t.me/TestBotReferalSystemBot?start=ref_{referral_code}"
            
            await callback.message.answer(
                text=f"""‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏ –¥–æ–≥–æ–≤–æ—Ä. –¢–µ–ø–µ—Ä—å –≤—ã –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∞–≥–µ–Ω—Ç —Å–µ—Ä–≤–∏—Å–∞!
                
–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è —Ç–æ—á–µ–∫ –ø—Ä–æ–¥–∞–∂:
{referral_link}

–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —ç—Ç–æ–π —Å—Å—ã–ª–∫–æ–π —Å –≤–∞—à–∏–º–∏ —Ç–æ—á–∫–∞–º–∏ –ø—Ä–æ–¥–∞–∂.""",
                reply_markup=None
            )
        else:
            await callback.message.answer(
                text="‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏ –¥–æ–≥–æ–≤–æ—Ä. –¢–µ–ø–µ—Ä—å –≤—ã –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞ –ø—Ä–æ–¥–∞–∂!",
                reply_markup=None
            )
        
        try:
            await bot.delete_message(
                chat_id=callback.message.chat.id,
                message_id=callback.message.message_id
            )
        except:
            pass
        
        await bot.send_message(
            chat_id=CHANNEL_ID,
            text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–¥–ø–∏—Å–∞–ª –¥–æ–≥–æ–≤–æ—Ä ({'–∞–≥–µ–Ω—Ç' if is_agent else '—Ç–æ—á–∫–∞ –ø—Ä–æ–¥–∞–∂'})."
        )
        
        await callback.answer()
        
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∞–Ω–∏–∏ –¥–æ–≥–æ–≤–æ—Ä–∞: {e}", show_alert=True)

@dp.message(lambda message: message.text and message.text.startswith("/start ref_"))
async def start_with_referral(message: types.Message, state: FSMContext):
    referral_code = message.text.split("ref_")[1].strip()
    agent_id = db.get_agent_by_referral(referral_code)
    
    if not agent_id:
        await message.answer("–ù–µ–≤–µ—Ä–Ω–∞—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞.")
        return
    
    if db.check_agent(message.from_user.id) or db.check_sales_point(message.from_user.id):
        await message.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ!")
        return
        
    welcome_text = """–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –í—ã –ø–µ—Ä–µ—à–ª–∏ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –∞–≥–µ–Ω—Ç–∞.
    
–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–∞–∫ —Ç–æ—á–∫–∞ –ø—Ä–æ–¥–∞–∂ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–°—Ç–∞—Ä—Ç" –Ω–∏–∂–µ."""
    
    await state.update_data(agent_id=agent_id)
    await message.answer(welcome_text, reply_markup=start_ref_inline_keyboard())

@dp.callback_query(lambda c: c.data == "start_registration_ref")
async def start_sales_point_registration(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    if 'agent_id' not in data:
        await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω –∞–≥–µ–Ω—Ç", show_alert=True)
        return
        
    instruction_text = """–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ—á–∫–∏ –ø—Ä–æ–¥–∞–∂ (–∫–∞–∂–¥–æ–µ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏):
–§–ò–û
–ì–æ—Ä–æ–¥
–¢–µ–ª–µ—Ñ–æ–Ω"""
    
    try:
        await callback.message.edit_text(instruction_text, reply_markup=None)
    except:
        await callback.message.answer(instruction_text)
    
    await state.set_state(SalesPointStates.waiting_for_data)
    await callback.answer()

@dp.message(SalesPointStates.waiting_for_data)
async def process_sales_point_data(message: types.Message, state: FSMContext):
    data = [line.strip() for line in message.text.split('\n') if line.strip()]
    
    if len(data) != 3:
        msg = await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Å–µ 3 –ø—É–Ω–∫—Ç–∞ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        await asyncio.sleep(3)
        try:
            await bot.delete_message(chat_id=message.chat.id, message_id=msg.message_id)
            await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
        except:
            pass
        return
    
    state_data = await state.get_data()
    agent_id = state_data['agent_id']
    
    await state.update_data({
        'full_name': data[0],
        'city': data[1],
        'phone': data[2],
        'agent_id': agent_id
    })
    
    confirmation_text = f"""–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:
    
–§–ò–û: {data[0]}
–ì–æ—Ä–æ–¥: {data[1]}
–¢–µ–ª–µ—Ñ–æ–Ω: {data[2]}
–ê–≥–µ–Ω—Ç: {agent_id}"""

    await message.answer(confirmation_text, reply_markup=confirmation_inline_keyboard())
    await state.set_state(SalesPointStates.confirmation)

@dp.callback_query(SalesPointStates.confirmation, lambda c: c.data == "confirm_data")
async def confirm_sales_point_data(callback: types.CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    
    db.add_sales_point((
        callback.from_user.id,
        user_data['agent_id'],
        user_data['full_name'],
        user_data['city'],
        user_data['phone'],
        False
    ))
    
    application_text = f"""üìÑ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Ç–æ—á–∫–∏ –ø—Ä–æ–¥–∞–∂ –æ—Ç @{callback.from_user.username} (ID: {callback.from_user.id})
    
–§–ò–û: {user_data['full_name']}
–ì–æ—Ä–æ–¥: {user_data['city']}
–¢–µ–ª–µ—Ñ–æ–Ω: {user_data['phone']}
–ê–≥–µ–Ω—Ç: {user_data['agent_id']}"""
    
    await bot.send_message(
        chat_id=CHANNEL_ID,
        text=application_text,
        reply_markup=admin_decision_keyboard(callback.from_user.id)
    )
    
    try:
        await callback.message.edit_text("–û—Ç–ª–∏—á–Ω–æ, –º—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à—É –∑–∞—è–≤–∫—É, –∂–¥–∏—Ç–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è", reply_markup=None)
    except:
        await callback.message.answer("–û—Ç–ª–∏—á–Ω–æ, –º—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à—É –∑–∞—è–≤–∫—É, –∂–¥–∏—Ç–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è")
    
    await state.clear()
    await callback.answer()

@dp.callback_query(lambda c: c.data.startswith("reject_"))
async def reject_application(callback: types.CallbackQuery, state: FSMContext):
    user_id = int(callback.data.split("_")[1])
    await state.update_data(reject_user_id=user_id)
    
    await callback.message.answer("üìù –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–∞–∑–∞:")
    await state.set_state(AdminStates.waiting_reason)
    await callback.answer()

@dp.message(AdminStates.waiting_reason)
async def process_reject_reason(message: types.Message, state: FSMContext):
    data = await state.get_data()
    user_id = data['reject_user_id']
    reason = message.text
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    try:
        await bot.send_message(
            chat_id=user_id,
            text=f"‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.\n\n–ü—Ä–∏—á–∏–Ω–∞: {reason}"
        )
    except Exception as e:
        await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")
        return
    
    await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–∫–∞–∑–µ.")
    await state.clear()

async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    asyncio.run(main())