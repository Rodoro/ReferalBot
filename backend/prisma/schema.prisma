generator client {
    provider = "prisma-client-js"
    output   = "./generated"
}

datasource db {
    provider = "postgresql"
    url      = env("POSTGRES_URI")
}

model Agent {
    id               Int      @id @default(autoincrement())
    userId           BigInt   @unique @map("user_id")
    fullName         String   @map("full_name")
    city             String
    inn              String
    phone            String
    businessType     String   @map("business_type")
    bik              String?
    account          String?
    bankName         String?  @map("bank_name")
    bankKs           String?  @map("bank_ks")
    bankDetails      String   @map("bank_details")
    approved         Boolean  @default(false)
    contractSigned   Boolean  @default(false) @map("contract_signed")
    referralCode     String?  @unique @map("referral_code")
    registrationDate DateTime @default(now()) @map("registration_date")

    salesPoints SalesPoint[]

    @@map("agents")
}

model Poet {
    id               Int      @id @default(autoincrement())
    userId           BigInt   @unique @map("user_id")
    fullName         String   @map("full_name")
    city             String
    inn              String
    phone            String
    businessType     String   @map("business_type")
    bik              String?
    account          String?
    bankName         String?  @map("bank_name")
    bankKs           String?  @map("bank_ks")
    bankDetails      String   @map("bank_details")
    approved         Boolean  @default(false)
    contractSigned   Boolean  @default(false) @map("contract_signed")
    registrationDate DateTime @default(now()) @map("registration_date")

    @@map("poets")
}

model SalesPoint {
    id               Int      @id @default(autoincrement())
    userId           BigInt   @unique @map("user_id")
    agentId          BigInt   @map("agent_id")
    fullName         String   @map("full_name")
    city             String
    inn              String
    phone            String
    businessType     String   @map("business_type")
    bik              String?
    account          String?
    bankName         String?  @map("bank_name")
    bankKs           String?  @map("bank_ks")
    bankDetails      String   @map("bank_details")
    approved         Boolean  @default(false)
    contractSigned   Boolean  @default(false) @map("contract_signed")
    referralCode     String?  @map("referral_code")
    registrationDate DateTime @default(now()) @map("registration_date")

    agent Agent @relation(fields: [agentId], references: [userId], onDelete: Cascade)

    @@map("sales_points")
}

model VideoEditor {
    id               Int      @id @default(autoincrement())
    userId           BigInt   @unique @map("user_id")
    fullName         String   @map("full_name")
    city             String
    inn              String
    phone            String
    businessType     String   @map("business_type")
    bik              String?
    account          String?
    bankName         String?  @map("bank_name")
    bankKs           String?  @map("bank_ks")
    bankDetails      String   @map("bank_details")
    approved         Boolean  @default(false)
    contractSigned   Boolean  @default(false) @map("contract_signed")
    registrationDate DateTime @default(now()) @map("registration_date")

    @@map("video_editors")
}

model Banner {
    id           Int      @id @default(autoincrement())
    imageUrl     String   @map("image_url")
    qrTopOffset  Int      @default(0) @map("qr_top_offset")
    qrLeftOffset Int      @default(0) @map("qr_left_offset")
    qrSize       Int      @default(100) @map("qr_size")
    createdAt    DateTime @default(now()) @map("created_at")

    @@map("banners")
}

model Staff {
    id String @id @default(uuid())

    firstName String  @map("first_name")
    midleName String? @map("midle_name")
    lastName  String  @map("last_name")

    permissions String @default("")

    notifications        Notification[]
    notificationSettings NotificationSettings?
}

model User {
    id String @id @default(uuid())

    avatar      String?
    displayName String  @map("display_name")
    telegramTeg String  @map("telegram_teg")
    telegramId  String  @unique @map("telegram_id")

    role RoleType

    tokens Token[]
}

model Token {
    id String @id @default(uuid())

    token     String    @unique
    type      TokenType
    expiresIn DateTime  @map("expires_in")

    createdAt DateTime @default(now()) @map("created_at")
    updateAt  DateTime @updatedAt @map("updated_at")

    user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String? @map("user_id")

    @@map("tokens")
}

model Notification {
    id String @id @default(uuid())

    message String
    type    NotificationType
    isRead  Boolean          @default(false) @map("is_read")

    user   Staff?  @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String? @map("user_id")

    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    @@map("notifications")
}

model NotificationSettings {
    id String @id @default(uuid())

    authLogin     Boolean @default(true) @map("auth_login")
    passwordReset Boolean @default(true) @map("password_reset")

    user   Staff  @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String @unique @map("user_id")

    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    @@map("notification_settings")
}

enum RoleType {
    STAFF
    AGENT
    SALES_POINT
    POET
    VIDEO_EDITOR

    @@map("role_types")
}

enum TokenType {
    TELEGRAM_AUTH

    @@map("token_types")
}

enum NotificationType {
    AUTH_LOGIN

    @@map("notification_types")
}
